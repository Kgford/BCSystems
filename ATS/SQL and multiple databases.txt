# Get AWS Datahttp://arpheno.github.io/django/mssql/inspectdb/2015/11/15/Django-and-MSSQL.htmlhttps://django-mssql.readthedocs.io/en/latest/pip install django==1.7 django-mssqlpython manage.py install_regex_clr database_nameDATABASES = {    'default': {        'NAME': 'transactions',        'ENGINE': 'sqlserver_ado',        'HOST': '127.0.0.1',        'PORT': '50824',        'USER': 'root',        'PASSWORD': 'root',    }} Note that `HOST` must be an IP address if you're specifying `PORT`.python manage.py shellpython manage.py inspectdb `python manage.py inspectdb > simba/models.py` # This command parse the tables in a connected database and spit out python classes describing them:manage.py migrate right away is going to fail unfortunately because the inspectdb tool doesnâ€™t know that id is special.You should modify the id line in your newly acquired models.py:class transactions2(models.Model):    ...    id = models.IntegerField(primary_key=True)    ... `python manage.py migrate` will now work just fine and djangofy the database, giving	To get the most impressive effect right away I modified testapp/admin.py:from django.contrib import adminfrom models import transactions2admin.site.register(transactions2)To shock my friend entirely I also created a superuser:python manage.py createsuperuser#multple Databaseshttps://pypi.org/project/django-pyodbc-azure/https://pypi.org/project/django-mssql-backend/https://docs.djangoproject.com/en/3.1/topics/db/multi-db/Supports Django 2.2, 3.0Supports Microsoft SQL Server 2008/2008R2, 2012, 2014, 2016, 2017, 2019Passes most of the tests of the Django test suiteCompatible with Micosoft ODBC Driver for SQL Server, SQL Server Native Client, and FreeTDS ODBC driverspip install django-pyodbc-azurepip install django-mssql-backendpython manage.py install_regex_clr {database_name}ENGINE': 'sql_server.pyodbc'DATABASES = {    'default': {        'ENGINE': 'sql_server.pyodbc',        'NAME': 'mydb',        'USER': 'user@myserver',        'PASSWORD': 'password',        'HOST': 'myserver.database.windows.net',        'PORT': '',        'OPTIONS': {            'driver': 'ODBC Driver 13 for SQL Server',        },    },}# set this to False if you want to turn off pyodbc's connection poolingDATABASE_CONNECTION_POOLING = False# how to migrate different databasesmanage.py migrate --database=usersmanage.py migrate --database=customers# get data to multiple databases>>> # This will run on the 'default' database.>>> Author.objects.all()>>> # So will this.>>> Author.objects.using('default').all()>>> # This will run on the 'other' database.>>> Author.objects.using('other').all()# save same data to multiple databasesp = Person(name='Fred')>>> p.save(using='first')>>> p.pk = None # Clear the primary key.>>> p.save(using='second') # Write a completely new object.