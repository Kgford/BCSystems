from django.shortcuts import render, redirect, resolve_urlfrom users.forms import UserForm,UserProfileInfoFormfrom django.contrib.auth import authenticate, login, logoutfrom django.http import HttpResponseRedirect, HttpResponsefrom django.urls import reverse, reverse_lazyfrom django.contrib.auth.decorators import login_requiredfrom django.core.files.storage import FileSystemStoragefrom BCSystems.settings import LOGIN_REDIRECT_URLfrom django.views import Viewfrom BCSystems.overhead import TimeCode, Securityfrom .models import UserProfileInfo,Globalsfrom django.contrib.auth.models import User#from E2.models import EmployeeCode, AttendanceDetail, AttendanceHeaderfrom django.contrib.auth.views import PasswordResetViewfrom django.contrib.messages.views import SuccessMessageMixindef index(request):	return redirect('tickets:tasks')@login_requireddef special(request):    return HttpResponse("You are logged in !")@login_requireddef user_logout(request):    success_url = reverse_lazy('users:logout')    logout(request)    #return HttpResponseRedirect(reverse('public:public'))    return redirect('tickets:tasks')		def register(request):	registered = False	if request.method == 'POST':		user_form = UserForm(data=request.POST)		profile_form = UserProfileInfoForm(data=request.POST)		if user_form.is_valid() and profile_form.is_valid():			user = user_form.save()			user.set_password(user.password)			user.save()			profile = profile_form.save(commit=False)			profile.user = user			if 'profile_pic' in request.FILES:				print('found it')				profile.profile_pic = request.FILES['profile_pic']			profile.save()			registered = True		else:			print(user_form.errors,profile_form.errors)	else:		user_form = UserForm()		profile_form = UserProfileInfoForm()	return redirect('tickets:tasks')						def password_reset(request):    success_url = reverse_lazy('users:password_reset')    return render(request,'users/password_reset_form.html')def user_login(request):    success_url = reverse_lazy('users:user_login')    operator = ''    if request.method == 'GET':        direct_to = request.GET.get('next')        print('direct_to=',direct_to)            #operator = str(request.user.get_short_name())    if request.method == 'POST':        username = request.POST.get('username')        password = request.POST.get('password')        direct_to = request.POST.get('_url',1)        print('direct_to898=',direct_to)        if not direct_to=='None':            split = direct_to.split('/')            #print('split=',split)            direct_to = split[1] + ":" + split[2]             print('direct_to=',direct_to)        user = authenticate(username=username, password=password)        if user:            if user.is_active:                login(request,user)                operator = str(request.user.get_short_name())                redirect_to = resolve_url(LOGIN_REDIRECT_URL)                #print('operator =',operator)                if direct_to=='None':                    print('direct_to=',direct_to)                    return redirect('tickets:tasks')                else:                    print('back to last page. direct_to=',direct_to)                    return redirect(direct_to)            else:                print('user not active')                return redirect('tickets:tasks')        else:            #print("Someone tried to login and failed.")            #print("They used username: {} and password: {}".format(username,password))            return redirect('tickets:tasks')    else:        #print('GET direct_to=',direct_to)        return redirect('tickets:tasks')		class ResetPasswordView(SuccessMessageMixin, PasswordResetView):    template_name = 'users/password_reset.html'    email_template_name = 'users/password_reset_email.html'    subject_template_name = 'users/password_reset_subject'    success_message = "We've emailed you instructions for setting your password, " \                      "if an account exists with the email you entered. You should receive them shortly." \                      " If you don't receive an email, " \                      "please make sure you've entered the address you registered with, and check your spam folder."    success_url = reverse_lazy('tickets:tasks')        class ProfileView(View):    template_name = "profiles.html"    def get(self, request, *args, **kwargs):        success_url = reverse_lazy('users:profile')        print('we are here')        try:            user_list=[]            user_names=[]            user_name =-1            active_group =-1            phone =-1            email =-1            address =-1            address_line2 =-1            ip_address =-1            city =-1            state =-1            zip =-1            birthdate =-1            hire_date=-1                        wage_change_date=-1            review_date=-1            portfolio_site =-1            salaried=-1            hourly=-1            profile_pic=-1            qrcode=-1            role=-1            work_email=-1            user_position=-1            termination_date=-1            last_review_date=-1            last_training_date=-1            shift_end =-1            shift_start=-1            shift=-1            hours=-1                        active_manager=False            active_supervisor=False            active_executive=False            active_administrator=False            active_department_manager=False            selected_user = request.GET.get('selected_user', -1)            #print('&^&^&^%&*^%*&^%*&^%*&^%*&^KJGKJBLK active_ticket=',active_ticket)            security=Security(request,'dont care')            initiator = security.get_active_user_name()            security=Security(request,'dont care')            active_user = security.get_active_user()            assigned=active_user            #print('active_user=',active_user)            manager_list=security.get_dept_Manager_list()            supervisor_list.get_dept_Supervisor_list()            print('manager_list=',manager_list)            print('supervisor_list=',supervisor_list)                        if request.user.is_authenticated:                #~~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                active_user_name = security.get_active_user_name()                assigned=active_user_name                active_user_firstname = security.get_active_user_firstname()                security=Security(request,self.request.user.get_full_name())                active_user_group = security.get_user_group()                 security=Security(request,'Senior Management')                  active_group=security.get_active_group()                active_manager=security.get_active_manager()                active_supervisor=security.get_active_supervisor()                #print ("active_manager ", active_manager)                active_executive=security.get_executive_manager()                #print ("active_executive ", active_executive)                active_administrator=security.get_active_administrator()                #print ("active_administrator ", active_administrator)                active_department_manager=security.get_dept_Manager()                #print ("active_department_manager ", active_department_manager)                #~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                  security=Security(request,'N.A')            user_names=security.get_active_user_names                                                #Getting selected users position for sensitive information            if selected_user!=-1:                print('selected_user44444=',selected_user)                security=Security(request,selected_user)                 user_position = security.get_user_position()                user_list=security.get_user_profile()                print('user_position',user_position)                employee_code=security.get_user_code()                print('DMS employee_code=',employee_code)                 full_name = selected_user.split( )                firstname=full_name[0]                print('firstname=',firstname)                 lastname=full_name[1]                print('lastname=',lastname)                 user = User.objects.filter(first_name=firstname).filter(last_name=lastname).last()                print('user=',user)                e2_employee=EmployeeCode.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).filter(active=True).last()                e2_attendence_header = AttendanceHeader.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).last()                if e2_attendence_header:                    e2_attendence_detail = AttendanceDetail.objects.using('E2').filter(attendance_header_id=e2_attendence_header.attendance_header_id ).last()                else:                    e2_attendence_detail=None                dms_employee=UserProfileInfo.objects.filter(user=user.pk).last()                if e2_attendence_detail:                    if not dms_employee.hourly:                        if e2_attendence_detail.payroll_rate:                            UserProfileInfo.objects.filter(user=user.pk).update(hourly=e2_attendence_detail.payroll_rate)                if e2_employee:                    print('dms_employee.hire_date=',dms_employee.hire_date)                    if not dms_employee.hire_date:                        if  e2_employee.hire_date!=None and e2_employee.hire_date != user_list.hire_date:                            hire_date=e2_employee.hire_date                            print('e2 hire_date=',hire_date)                            if hire_date:                                hire_date=e2_employee.hire_date.strftime('%Y-%m-%d')                                print('e2 hire_date=',hire_date)                                UserProfileInfo.objects.filter(user=user.pk).update(hire_date=hire_date)                    else:                        hire_date=dms_employee.hire_date.strftime('%Y-%m-%d')                                        print('dms_employee.birthdate=',dms_employee.birthdate)                    if not dms_employee.birthdate:                        if  e2_employee.user_date1 != None and e2_employee.user_date1 != user_list.birthdate:                            birthdate=e2_employee.user_date1                            if birthdate:                                birthdate=e2_employee.user_date1.strftime('%Y-%m-%d')                                print('e2 birth_date=',birthdate)                                UserProfileInfo.objects.filter(user=user.pk).update(birthdate=birthdate)                    else:                        birthdate=dms_employee.birthdate.strftime('%Y-%m-%d')                                        print('birthdate=',birthdate)                    personal_phone=dms_employee.personal_phone                    print('personal_phone=',personal_phone)                    if not personal_phone:                        if e2_employee.phone_number!=user_list.personal_phone:                            print('we are here3')                            personal_phone=dms_employee.personal_phone                            if not personal_phone:                                personal_phone=e2_employee.user_text3                                if personal_phone:                                       UserProfileInfo.objects.filter(user=user.pk).update(personal_phone=personal_phone)                                                             employee_number=dms_employee.employee_number                    if not employee_number:                        if e2_employee.employee_number!=user_list.employee_number:                            print('we are here4')                            employee_number=dms_employee.employee_number                            if not employee_number:                                employee_number=e2_employee.employee_number                                print('employee_number=',employee_number)                                if employee_number:                                       UserProfileInfo.objects.filter(user=user.pk).update(employee_number=employee_number)                                        if not dms_employee.termination_date:                        if e2_employee.termination_date!= None and  e2_employee.termination_date!=user_list.termination_date:                            print('we are here5')                            termination_date=dms_employee.termination_date.strftime('%Y-%m-%d')                            if not termination_date:                                termination_date=e2_employee.termination_date.strftime('%Y-%m-%d')                                if termination_date:                                    UserProfileInfo.objects.filter(user=user.pk).update(termination_date=termination_date)                    else:                        termination_date=dms_employee.termination_date.strftime('%Y-%m-%d')                                                                                                    if not dms_employee.last_review_date:                        if  e2_employee.last_review_date!=None and e2_employee.last_review_date!=user_list.last_review_date:                            print('we are here6')                            last_review_date=dms_employee.last_review_date.strftime('%Y-%m-%d')                            if not last_review_date:                                last_review_date=e2_employee.last_review_date.strftime('%Y-%m-%d')                                if last_review_date:                                    UserProfileInfo.objects.filter(user=user.pk).update(last_review_date=last_training_date)                    else:                        last_review_date=dms_employee.last_review_date.strftime('%Y-%m-%d')                                            personal_email=dms_employee.personal_email                    if not personal_email:                          if not personal_email:                            personal_email=e2_employee.user_text2                            if personal_email:                                UserProfileInfo.objects.filter(user=user.pk).update(personal_email=personal_email)                                          employee_code=dms_employee.employee_code                    if not employee_code:                        if e2_employee.employee_code!=user_list.employee_code:                            print('we are here8')                            employee_code=dms_employee.employee_code                            if not employee_code:                                employee_code=e2_employee.employee_code                                if employee_code:                                    UserProfileInfo.objects.filter(user=user.pk).update(employee_code=employee_code)                        shift_code=dms_employee.shift                    if not shift_code:                        if e2_employee.shift_code!=user_list.shift:                            print('we are here9')                            shift_code=dms_employee.shift                            if not shift_code:                                shift_code=e2_employee.shift_code                                if shift_code:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift=shift_code)                                            shift_start=dms_employee.shift_start                    if not shift_start:                        if e2_employee.shift_begin_time.time()!=user_list.shift_start:                            print('we are here10')                            shift_start=dms_employee.shift_start                            if not shift_start:                                shift_start=e2_employee.shift_begin_time.time()                                print('shift_start',shift_start)                                if shift_start:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift_start=shift_start)                                            shift_end=dms_employee.shift_end                    if not shift_end:                        if e2_employee.shift_end_time.time()!=user_list.shift_end:                            print('we are here11')                            shift_end=dms_employee.shift_end                            if not shift_end:                                shift_end=e2_employee.shift_end_time.time()                                print('shift_end',shift_end)                                if shift_end:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift_end=shift_end)                                     print('we are here13',shift_end)                                else:                users = UserProfileInfo.objects.all()                for this_user in users:                    print('this_user=',this_user)                    if not this_user.employee_code:                        user = User.objects.filter(username=this_user.user.username).last()                        username=user.first_name + " " + user.last_name                        security=Security(request,username)                         employee_code=security.get_user_code()                        print('employee_code=',employee_code)                        e2_employee=EmployeeCode.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).last()                        if e2_employee:                            UserProfileInfo.objects.filter(user=this_user.pk).update(employee_code=employee_code)                              print('updating..',employee_code)                                        user_list=security.get_user_profile()            print('user_list=',user_list)            user_name=selected_user            if user_list.hire_date:                hire_date=user_list.hire_date.strftime('%Y-%m-%d')            if user_list.termination_date:                termination_date=user_list.termination_date.strftime('%Y-%m-%d')            if user_list.last_review_date:                last_review_date=user_list.last_review_date.strftime('%Y-%m-%d')            if user_list.wage_change_date:                wage_change_date=user_list.wage_change_date.strftime('%Y-%m-%d')            if user_list.birthdate:                birthdate=user_list.birthdate.strftime('%Y-%m-%d')            if user_list.last_training_date:                last_training_date=user_list.last_training_date.strftime('%Y-%m-%d')                                    no_lookie='Not Authorized'            print('user_position=',user_position)        except IOError as e:            print ("Lists load Failure ", e)            print('error = ',e)         return render (self.request,"users/profiles.html",{'user_names':user_names,'user_list':user_list,'user_name':user_name,'active_user_firstname':active_user_firstname,'active_group':active_group,'active_manager':active_manager,'active_supervisor':active_supervisor,'active_executive':active_executive,                                                            'active_department_manager':active_department_manager,'active_user':active_user,'active_user_name':active_user_name,'active_user_group':active_user_group,'active_administrator':active_administrator,'hire_date':hire_date,'termination_date':termination_date,                                                            'last_review_date':last_review_date,'wage_change_date':wage_change_date,'birthdate':birthdate,'last_training_date':last_training_date,'user_position':user_position,'no_lookie':no_lookie,'shift':shift,'shift_start':shift_start,'shift_end':shift_end,'hours':hours})                                                                class ProfilesView(View):    template_name = "user_profiles.html"    def get(self, request, *args, **kwargs):        success_url = reverse_lazy('users:profiles')        print('we are here')        try:            user_list=[]            user_names=[]            user_name =-1            active_group =-1            phone =-1            email =-1            address =-1            address_line2 =-1            ip_address =-1            city =-1            state =-1            zip =-1            birthdate =-1            hire_date=-1                        wage_change_date=-1            review_date=-1            portfolio_site =-1            salaried=-1            hourly=-1            profile_pic=-1            qrcode=-1            role=-1            work_email=-1            user_position=-1            termination_date=-1            last_review_date=-1            last_training_date=-1            shift_end =-1            shift_start=-1            shift=-1            hours=-1                        active_manager=False            active_supervisor=False            active_executive=False            active_administrator=False            active_department_manager=False            selected_user = request.GET.get('selected_user', -1)            #print('&^&^&^%&*^%*&^%*&^%*&^%*&^KJGKJBLK active_ticket=',active_ticket)            security=Security(request,'dont care')            initiator = security.get_active_user_name()            security=Security(request,'dont care')            active_user = security.get_active_user()            assigned=active_user            #print('active_user=',active_user)            if request.user.is_authenticated:                #~~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                active_user_name = security.get_active_user_name()                assigned=active_user_name                active_user_firstname = security.get_active_user_firstname()                security=Security(request,self.request.user.get_full_name())                active_user_group = security.get_user_group()                 security=Security(request,'Senior Management')                  active_group=security.get_active_group()                active_manager=security.get_active_manager()                active_supervisor=security.get_active_supervisor()                #print ("active_manager ", active_manager)                active_executive=security.get_executive_manager()                #print ("active_executive ", active_executive)                active_administrator=security.get_active_administrator()                #print ("active_administrator ", active_administrator)                active_department_manager=security.get_dept_Manager()                #print ("active_department_manager ", active_department_manager)                #~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                  security=Security(request,'N.A')            user_names=security.get_active_user_names            manager_list=['Tom Passaro','TJ Dowling','Janice Trozzo','Rich Rositano','Dan Guiffre','Theo Zinn','Natalie Richards','Joe Hoang','Wendy Vergaray']                        #Getting selected users position for sensitive information            if selected_user!=-1:                print('selected_user44444=',selected_user)                security=Security(request,selected_user)                 user_position = security.get_user_position()                user_list=security.get_user_profile()                print('user_position',user_position)                employee_code=security.get_user_code()                print('DMS employee_code=',employee_code)                 full_name = selected_user.split( )                firstname=full_name[0]                print('firstname=',firstname)                 lastname=full_name[1]                print('lastname=',lastname)                 user = User.objects.filter(first_name=firstname).filter(last_name=lastname).last()                print('user=',user)                e2_employee=EmployeeCode.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).filter(active=True).last()                e2_attendence_header = AttendanceHeader.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).last()                if e2_attendence_header:                    e2_attendence_detail = AttendanceDetail.objects.using('E2').filter(attendance_header_id=e2_attendence_header.attendance_header_id ).last()                else:                    e2_attendence_detail=None                dms_employee=UserProfileInfo.objects.filter(user=user.pk).last()                if e2_attendence_detail:                    if not dms_employee.hourly:                        if e2_attendence_detail.payroll_rate:                            UserProfileInfo.objects.filter(user=user.pk).update(hourly=e2_attendence_detail.payroll_rate)                if e2_employee:                    print('dms_employee.hire_date=',dms_employee.hire_date)                    if not dms_employee.hire_date:                        if  e2_employee.hire_date!=None and e2_employee.hire_date != user_list.hire_date:                            hire_date=e2_employee.hire_date                            print('e2 hire_date=',hire_date)                            if hire_date:                                hire_date=e2_employee.hire_date.strftime('%Y-%m-%d')                                print('e2 hire_date=',hire_date)                                UserProfileInfo.objects.filter(user=user.pk).update(hire_date=hire_date)                    else:                        hire_date=dms_employee.hire_date.strftime('%Y-%m-%d')                                        print('dms_employee.birthdate=',dms_employee.birthdate)                    if not dms_employee.birthdate:                        if  e2_employee.user_date1 != None and e2_employee.user_date1 != user_list.birthdate:                            birthdate=e2_employee.user_date1                            if birthdate:                                birthdate=e2_employee.user_date1.strftime('%Y-%m-%d')                                print('e2 birth_date=',birthdate)                                UserProfileInfo.objects.filter(user=user.pk).update(birthdate=birthdate)                    else:                        birthdate=dms_employee.birthdate.strftime('%Y-%m-%d')                                        print('birthdate=',birthdate)                    personal_phone=dms_employee.personal_phone                    print('personal_phone=',personal_phone)                    if not personal_phone:                        if e2_employee.phone_number!=user_list.personal_phone:                            print('we are here3')                            personal_phone=dms_employee.personal_phone                            if not personal_phone:                                personal_phone=e2_employee.user_text3                                if personal_phone:                                       UserProfileInfo.objects.filter(user=user.pk).update(personal_phone=personal_phone)                                                             employee_number=dms_employee.employee_number                    if not employee_number:                        if e2_employee.employee_number!=user_list.employee_number:                            print('we are here4')                            employee_number=dms_employee.employee_number                            if not employee_number:                                employee_number=e2_employee.employee_number                                print('employee_number=',employee_number)                                if employee_number:                                       UserProfileInfo.objects.filter(user=user.pk).update(employee_number=employee_number)                                                           if e2_employee.termination_date:                        if e2_employee.termination_date!= None and  e2_employee.termination_date!=user_list.termination_date:                            print('we are here5')                            termination_date=dms_employee.termination_date.strftime('%Y-%m-%d')                            if not termination_date:                                termination_date=e2_employee.termination_date.strftime('%Y-%m-%d')                                if termination_date:                                    UserProfileInfo.objects.filter(user=user.pk).update(termination_date=termination_date)                    else:                        if dms_employee.termination_date:                            termination_date=dms_employee.termination_date.strftime('%Y-%m-%d')                                                                                                    if not dms_employee.last_review_date:                        if  e2_employee.last_review_date!=None and e2_employee.last_review_date!=user_list.last_review_date:                            print('we are here6')                            last_review_date=dms_employee.last_review_date.strftime('%Y-%m-%d')                            if not last_review_date:                                last_review_date=e2_employee.last_review_date.strftime('%Y-%m-%d')                                if last_review_date:                                    UserProfileInfo.objects.filter(user=user.pk).update(last_review_date=last_training_date)                    else:                        last_review_date=dms_employee.last_review_date.strftime('%Y-%m-%d')                                            personal_email=dms_employee.personal_email                    if not personal_email:                          if not personal_email:                            personal_email=e2_employee.user_text2                            if personal_email:                                UserProfileInfo.objects.filter(user=user.pk).update(personal_email=personal_email)                                          employee_code=dms_employee.employee_code                    if not employee_code:                        if e2_employee.employee_code!=user_list.employee_code:                            print('we are here8')                            employee_code=dms_employee.employee_code                            if not employee_code:                                employee_code=e2_employee.employee_code                                if employee_code:                                    UserProfileInfo.objects.filter(user=user.pk).update(employee_code=employee_code)                        shift_code=dms_employee.shift                    if not shift_code:                        if e2_employee.shift_code!=user_list.shift:                            print('we are here9')                            shift_code=dms_employee.shift                            if not shift_code:                                shift_code=e2_employee.shift_code                                if shift_code:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift=shift_code)                                            shift_start=dms_employee.shift_start                    if not shift_start:                        if e2_employee.shift_begin_time.time()!=user_list.shift_start:                            print('we are here10')                            shift_start=dms_employee.shift_start                            if not shift_start:                                shift_start=e2_employee.shift_begin_time.time()                                print('shift_start',shift_start)                                if shift_start:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift_start=shift_start)                                            shift_end=dms_employee.shift_end                    if not shift_end:                        if e2_employee.shift_end_time.time()!=user_list.shift_end:                            print('we are here11')                            shift_end=dms_employee.shift_end                            if not shift_end:                                shift_end=e2_employee.shift_end_time.time()                                print('shift_end',shift_end)                                if shift_end:                                    UserProfileInfo.objects.filter(user=user.pk).update(shift_end=shift_end)                                     print('we are here13',shift_end)                                else:                users = UserProfileInfo.objects.all()                for this_user in users:                    #print('this_user=',this_user)                    if not this_user.employee_code:                        user = User.objects.filter(username=this_user.user.username).last()                        username=user.first_name + " " + user.last_name                        security=Security(request,username)                         employee_code=security.get_user_code()                        print('employee_code=',employee_code)                        e2_employee=EmployeeCode.objects.using('E2').exclude(company_code='ABC').filter(employee_code=employee_code).last()                        if e2_employee:                            UserProfileInfo.objects.filter(user=this_user.pk).update(employee_code=employee_code)                              print('updating..',employee_code)                                        user_list=security.get_user_profile()            print('user_list=',user_list)            user_name=selected_user            if user_list.hire_date:                hire_date=user_list.hire_date.strftime('%Y-%m-%d')            if user_list.termination_date:                termination_date=user_list.termination_date.strftime('%Y-%m-%d')            if user_list.last_review_date:                last_review_date=user_list.last_review_date.strftime('%Y-%m-%d')            if user_list.wage_change_date:                wage_change_date=user_list.wage_change_date.strftime('%Y-%m-%d')            if user_list.birthdate:                birthdate=user_list.birthdate.strftime('%Y-%m-%d')            if user_list.last_training_date:                last_training_date=user_list.last_training_date.strftime('%Y-%m-%d')                                    no_lookie='Not Authorized'            print('user_position=',user_position)        except IOError as e:            print ("Lists load Failure ", e)            print('error = ',e)         return render (self.request,"users/user_profiles.html",{'user_names':user_names,'user_list':user_list,'user_name':user_name,'active_user_firstname':active_user_firstname,'active_group':active_group,'active_manager':active_manager,'active_supervisor':active_supervisor,'active_executive':active_executive,'manager_list':manager_list,                                                            'active_department_manager':active_department_manager,'active_user':active_user,'active_user_name':active_user_name,'active_user_group':active_user_group,'active_administrator':active_administrator,'hire_date':hire_date,'termination_date':termination_date,                                                            'last_review_date':last_review_date,'wage_change_date':wage_change_date,'birthdate':birthdate,'last_training_date':last_training_date,'user_position':user_position,'no_lookie':no_lookie,'shift':shift,'shift_start':shift_start,'shift_end':shift_end,'hours':hours})                                                                            def post(self, request, *args, **kwargs):        try:            user_list=[]            user_names=[]            user_name = request.POST.get('_user_name', -1)            if user_name!=-1: # finding out if the user has changed                full_name = user_name.split( )                firstname=full_name[0]                print('firstname=',firstname)                 lastname=full_name[1]                print('lastname=',lastname)                 user = User.objects.filter(first_name=firstname).filter(last_name=lastname).last()                print('user=',user)                last_user=Globals.objects.values('last_user').last() # see if any value exists                print('last_user=',last_user,' user_name=',user_name)                if not last_user:# none existed so we are creating it here and settin the variable                    Globals.objects.create(last_user=user_name)                     last_user=user_name                elif last_user['last_user'] != user_name:# this user is not the same as the last user                    last_user=last_user['last_user']                    Globals.objects.filter(last_user=last_user).update(last_user=user_name)# make this user the next last user                else:                    last_user=user_name                print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~last_user=',last_user,' this user=',user_name)                        security=Security(request,user_name)            user_list=security.get_user_profile()            manager_list=['Tom Passaro','TJ Dowling','Janice Trozzo','Rich Rositano','Dan Guiffre','Theo Zinn','Natalie Richards','Joe Hoang','Natalie Richards']            #print('##########################user_list=',user_list)            #print('##########################user_list.lean_status=',user_list.lean_status)            active = request.POST.get('_active', -1)            print('active=',active)            if active=='on':                active=True            else:                active=False            print('active=',active)                        ticket_list = request.POST.get('_ticket_list', '')            if ticket_list=='on':                ticket_list=True            else:                ticket_list=False                ticket_list = request.POST.get('_ticket_list', '')                        gemba_team = request.POST.get('_gemba_team', '')            if gemba_team=='on':                gemba_team=True            else:                gemba_team=False                        ci_list = request.POST.get('_ci_list', '')            if ci_list=='on':                ci_list=True            else:                ci_list=False                        paychex = request.POST.get('_paychex', '')            if paychex=='on':                paychex=True            else:                paychex=False            print('paychex=',paychex)            active_group= request.POST.get('_active_group', '')            print('888888888888888888888888888888888active_group=',active_group)            phone= request.POST.get('_phone', '')            personal_phone= request.POST.get('_personal_phone', '')            email= request.POST.get('_email', '')            personal_email= request.POST.get('_personal_email', '')            address= request.POST.get('_address', '')            address_line2= request.POST.get('_address_line2', '')            ip_address= request.POST.get('_ip_address', '')            city= request.POST.get('_city', '')            state= request.POST.get('_state', '')            zip= request.POST.get('_zip', '')            birthdate= request.POST.get('_birthdate', -1)            hire_date= request.POST.get('_hire_date', -1)            termination_date= request.POST.get('_termination_date', -1)            wage_change_date= request.POST.get('_wage_change_date', -1)            last_training_date= request.POST.get('_last_training_date', -1)            last_review_date= request.POST.get('_review_date', -1)            print('last_review_date=',last_review_date)            salaried= request.POST.get('_salaried', 0.00)            hourly= request.POST.get('_hourly', 0.00)            role= request.POST.get('_role', '')            reports_to= request.POST.get('_reports_to', '')            employee_number = request.POST.get('_employee_number', -1)            department_code = request.POST.get('_department_code', '')            print('department_code',department_code)            status = request.POST.get('_status', '')            portfolio_site= request.POST.get('_portfolio_site', '')            contact_name = request.POST.get('_contact_name', '')            contact_relationship = request.POST.get('_contact_relationship', '')            contact_address = request.POST.get('_contact_address', '')            contact_address_line2 = request.POST.get('_contact_address_line2', '')            contact_city = request.POST.get('_contact_city', '')            contact_state = request.POST.get('_contact_state', '')            contact_zip = request.POST.get('_contact_zip', '')            contact_phone = request.POST.get('_contact_phone', '')            print('contact_phone=',contact_phone)            contact_cell_phone = request.POST.get('_contact_cell_phone', '')            contact_email = request.POST.get('_contact_email', '')            contact_personal_email = request.POST.get('_contact_personal_email', '')            shift_end = request.POST.get('_shift_end', '')            print('shift_end=',shift_end)            shift_start = request.POST.get('_shift_start', '')            lean_status = request.POST.get('_lean_status', '')            print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@lean_status=',lean_status)            print('lean_status=',lean_status)            shift = request.POST.get('_shift', '')            hours = request.POST.get('_hours', '')                        try:                profile_pic = request.FILES['upload']                fss = FileSystemStorage()                print('fss =',fss )                file = fss.save(profile_pic.name, profile_pic)                print('file =',file)                file_url = fss.url(file)                print('file_url=',file_url)                            except BaseException as e:                print('error1=',e)                profile_pic =-1                            active_manager=False            active_supervisor=False            active_executive=False            active_administrator=False            active_department_manager=False            selected_user = request.GET.get('selected_user', -1)            #print('&^&^&^%&*^%*&^%*&^%*&^%*&^KJGKJBLK active_ticket=',active_ticket)            security=Security(request,'dont care')            initiator = security.get_active_user_name()            security=Security(request,'dont care')            active_user = security.get_active_user()            assigned=active_user            #print('active_user=',active_user)            if request.user.is_authenticated:                #~~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                active_user_name = security.get_active_user_name()                assigned=active_user_name                active_user_firstname = security.get_active_user_firstname()                security=Security(request,self.request.user.get_full_name())                active_user_group = security.get_user_group()                 security=Security(request,'Senior Management')                  #active_group=security.get_active_group()                active_manager=security.get_active_manager()                active_supervisor=security.get_active_supervisor()                #print ("active_manager ", active_manager)                active_executive=security.get_executive_manager()                #print ("active_executive ", active_executive)                active_administrator=security.get_active_administrator()                #print ("active_administrator ", active_administrator)                active_department_manager=security.get_dept_Manager()                #print ("active_department_manager ", active_department_manager)                #~~~~~~~~~~~~~~~~~active~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~            print('profile_pic=',profile_pic)            qrcode= request.POST.get('_qrcode', -1)            save= request.POST.get('_save', -1)                        security=Security(request,'N.A')            user_names=security.get_active_user_names                        print('save=',save)            print('########################################################contact_name=',contact_name)            print('contact_cell_phone=',contact_cell_phone)            print('contact_phone=',contact_phone)            print('lean_status=',lean_status)            if lean_status==-1:                lean_status='None'            lean_status            if save!=-1:                print('in save or update', contact_phone)                if UserProfileInfo.objects.filter(user=user.pk).exists():                    print('in update', contact_phone)                    if shift_start=='' or shift_start==-1:                        UserProfileInfo.objects.filter(user=user.pk).update(active_group=active_group,phone=phone,personal_phone=personal_phone,email=email,personal_email=personal_email,address=address,active=active,ticket_list=ticket_list,ci_list=ci_list,                                                                            address_line2=address_line2,city=city,state=state,zip=zip,role=role,employee_number=employee_number,portfolio_site=portfolio_site,department_code=department_code,paychex=paychex,                                                                            status=status,reports_to=reports_to,contact_name=contact_name,contact_relationship=contact_relationship,contact_address=contact_address,contact_address_line2=contact_address_line2,                                                                            contact_city=contact_city,contact_state=contact_state,contact_zip=contact_zip,contact_phone=contact_phone,contact_cell_phone=contact_cell_phone,contact_email=contact_email,                                                                            contact_personal_email=contact_personal_email,hours=hours,lean_status=lean_status,gemba_team=gemba_team)                    else:                        UserProfileInfo.objects.filter(user=user.pk).update(active_group=active_group,phone=phone,personal_phone=personal_phone,email=email,personal_email=personal_email,address=address,active=active,ticket_list=ticket_list,ci_list=ci_list,                                                                            address_line2=address_line2,city=city,state=state,zip=zip,role=role,employee_number=employee_number,portfolio_site=portfolio_site,department_code=department_code,paychex=paychex,                                                                            status=status,reports_to=reports_to,contact_name=contact_name,contact_relationship=contact_relationship,contact_address=contact_address,contact_address_line2=contact_address_line2,                                                                            contact_city=contact_city,contact_state=contact_state,contact_zip=contact_zip,contact_phone=contact_phone,contact_cell_phone=contact_cell_phone,contact_email=contact_email,                                                                            contact_personal_email=contact_personal_email,hours=hours,shift_start=shift_start,shift_end=shift_end,shift=shift,lean_status=lean_status,gemba_team=gemba_team)                                                                                            else:                    print('in save', contact_phone)                    if shift_start=='' or shift_start==-1:                        UserProfileInfo.objects.create(active_group=active_group,phone=phone,personal_phone=personal_phone,email=email,personal_email=personal_email,address=address,active=active,ticket_list=ticket_list,ci_list=ci_list,paychex=paychex,                                                                            address_line2=address_line2,city=city,state=state,zip=zip,role=role,hire_date=hire_date,employee_number=employee_number,portfolio_site=portfolio_site,department_code=department_code,                                                                            status=status,reports_to=reports_to,contact_name=contact_name,contact_relationship=contact_relationship,contact_address=contact_address,contact_address_line2=contact_address_line2,                                                                            contact_city=contact_city,contact_state=contact_state,contact_zip=contact_zip,contact_phone=contact_phone,contact_cell_phone=contact_cell_phone,contact_email=contact_email,                                                                            contact_personal_email=contact_personal_email,hours=hours,lean_status=lean_status,gemba_team=gemba_team)                    else:                         UserProfileInfo.objects.create(active_group=active_group,phone=phone,personal_phone=personal_phone,email=email,personal_email=personal_email,address=address,active=active,ticket_list=ticket_list,ci_list=ci_list,paychex=paychex,                                                                            address_line2=address_line2,city=city,state=state,zip=zip,role=role,hire_date=hire_date,employee_number=employee_number,portfolio_site=portfolio_site,department_code=department_code,                                                                            status=status,reports_to=reports_to,contact_name=contact_name,contact_relationship=contact_relationship,contact_address=contact_address,contact_address_line2=contact_address_line2,                                                                            contact_city=contact_city,contact_state=contact_state,contact_zip=contact_zip,contact_phone=contact_phone,contact_cell_phone=contact_cell_phone,contact_email=contact_email,                                                                            contact_personal_email=contact_personal_email,hours=hours,shift_start=shift_start,shift_end=shift_end,shift=shift,lean_status=lean_status,gemba_team=gemba_team)                                                                print('wage_change_date=',wage_change_date)                                                                print('birthdate=',birthdate)                print('hire_date=',hire_date)                print('wage_change_date=',birthdate)                                           if profile_pic!=-1:                    UserProfileInfo.objects.filter(user=user_list.user).update(profile_pic=profile_pic)                if birthdate!=-1 and birthdate!='':                    UserProfileInfo.objects.filter(user=user_list.user).update(birthdate=birthdate)                if hire_date!=-1 and hire_date!='':                    UserProfileInfo.objects.filter(user=user_list.user).update(hire_date=hire_date)                if wage_change_date!=-1 and wage_change_date!='':                    UserProfileInfo.objects.filter(user=user_list.user).update(wage_change_date=wage_change_date)                if last_review_date!=-1 and last_review_date!='':                    UserProfileInfo.objects.filter(user=user_list.user).update(last_review_date=last_review_date)                   if last_training_date!=-1 and last_training_date!='':                    UserProfileInfo.objects.filter(user=user_list.user).update(last_training_date=last_training_date)                if termination_date!=-1 and termination_date!='':                    UserProfileInfo.objects.filter(user=user.pk).update(termination_date=termination_date)                if salaried!=-1 and salaried!='':                    UserProfileInfo.objects.filter(user=user.pk).update(salaried=salaried)                if hourly!=-1 and hourly!='':                    UserProfileInfo.objects.filter(user=user.pk).update(hourly=hourly)                                    security=Security(request,user_name)                user_list=security.get_user_profile()                print('user_list=',user_list)                        if not active:                return redirect(f"{reverse('users:profiles')}" )                                except IOError as e:            print ("Lists load Failure ", e)            print('error = ',e)         return redirect(f"{reverse('users:profiles')}?selected_user=" + str(user_name))